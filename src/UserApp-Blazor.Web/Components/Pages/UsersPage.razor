@page "/Users"
@using UserApp_Blazor.Domain.Entities
@using UserApp_Blazor.Web.Service.Services
@inject IUserService UserService
@inject NavigationManager NavigationManager

<h3>Users</h3>

<!-- Foydalanuvchilar ro'yxati -->
<table class="table table-striped">
    <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Email</th>
            <th>About</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (Users != null && Users.Any())
        {
            @foreach (var user in Users)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td>@user.About</td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => EditUser(user)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteUser(user)">Delete</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5">No users found.</td>
            </tr>
        }
    </tbody>
</table>

<!-- Foydalanuvchi qo'shish yoki yangilash formasi -->
<div class="card mt-3">
    <div class="card-body">
        <h5>@(IsEditing ? "Edit User" : "Add User")</h5>
        <EditForm Model="CurrentUser" OnValidSubmit="SaveUser">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label>Name</label>
                <InputText class="form-control" @bind-Value="CurrentUser.Name" />
            </div>
            <div class="mb-3">
                <label>Email</label>
                <InputText class="form-control" @bind-Value="CurrentUser.Email" />
            </div>
            <div class="mb-3">
                <label>About</label>
                <InputTextArea class="form-control" @bind-Value="CurrentUser.About" />
            </div>
            <button class="btn btn-success">@("Save")</button>
            @if (IsEditing)
            {
                <button type="button" class="btn btn-secondary ms-2" @onclick="CancelEdit">Cancel</button>
            }
        </EditForm>
    </div>
</div>

@code {
    private List<User> Users = new();
    private User CurrentUser = new();
    private bool IsEditing = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        Users = (await UserService.GetAllAsync()).ToList();
    }

    private void EditUser(User user)
    {
        CurrentUser = new User
            {
                Id = user.Id,
                Name = user.Name,
                Email = user.Email,
                About = user.About
            };
        IsEditing = true;
    }

    private async Task SaveUser()
    {
        if (IsEditing)
        {
            await UserService.UpdateAsync(CurrentUser.Id, CurrentUser);
        }
        else
        {
            await UserService.CreateAsync(CurrentUser);
        }

        await LoadUsers();
        ResetForm();
    }

    private async Task DeleteUser(User user)
    {
       // var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete user with ID {user.Id}?");

        if (true)
        {
            // Foydalanuvchini o'chirish
            await UserService.DeleteAsync(user.Id);
            await LoadUsers();  // Yangi ro'yxatni yuklash
        }
    }


    private void CancelEdit()
    {
        ResetForm();
    }

    private void ResetForm()
    {
        CurrentUser = new User();
        IsEditing = false;
    }
}