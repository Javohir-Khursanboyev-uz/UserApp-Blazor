@page "/users"
@rendermode InteractiveServer
@inject IUserService userService
@using UserApp_Blazor.Domain.Entities
@using UserApp_Blazor.Web.Service.Services
@using UserApp_Blazor.Shared.Configurations
@inject NavigationManager navigationManager
@using UserApp_Blazor.Web.Components.Pages.User.Dialogs

<h3>Users</h3>

<!-- Qidiruv -->
<div class="mb-3">
    <input type="text" class="form-control" placeholder="Search users..."
    @bind="searchTerm" @onkeyup="OnKeyUp" />
</div>


<!-- Xatolik xabari -->
@if (showError)
{
    <div class="alert alert-danger mb-4">
        @errorMessage
    </div>
}


<!-- Foydalanuvchilar ro'yxati -->
<div class="table-responsive">
    <table class="table table-striped table-hover">
        <thead class="thead-dark">
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Email</th>
                <th>About</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (users != null && users.Any())
            {
                @foreach (var user in users)
                {
                    <tr>
                        <td>@user.Id</td>
                        <td>@user.Name</td>
                        <td>@user.Email</td>
                        <td>@user.About</td>
                        <td>
                            <button class="btn btn-primary">Edit</button>
                            <button class="btn btn-danger" type="button" @onclick="() => ShowDeleteDialog(user.Id)">Delete</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="5" class="text-center">No users found.</td>
                </tr>
            }
        </tbody>
    </table>
</div>


<!-- Pagination Controls -->
@if (pagination != null)
{
    <nav aria-label="Page navigation">
        <ul class="pagination">
            <!-- Previous Button -->
            <li class="page-item @(pagination.HasPrevious ? "" : "disabled")">
                <button class="page-link" @onclick="GoToPreviousPage" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                </button>
            </li>

            <!-- Page Numbers -->
            @for (int i = 1; i <= pagination.TotalPages; i++)
            {
                var pageNumber = i; // Yangi o‘zgaruvchi
                <li class="page-item @(pageNumber == pagination.CurrentPage ? "active" : "")">
                    <button class="page-link" @onclick="@(() => GoToPage(pageNumber))">@pageNumber</button>
                </li>
            }

            <!-- Next Button -->
            <li class="page-item @(pagination.HasNext ? "" : "disabled")">
                <button class="page-link" @onclick="GoToNextPage" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </button>
            </li>
        </ul>
    </nav>
}


<!-- Confirmation Dialog -->
@if (showDeleteDialog)
{
    <DeleteUser OnUserDeleted="HandleDeleteUser" />
}


@code {
    private long userId;
    private bool showError = false;
    private string errorMessage = string.Empty;
    private bool showDeleteDialog = false;
    private string searchTerm = string.Empty;
    private PaginationMetaData pagination = new ();
    private IEnumerable<User> users = Enumerable.Empty<User>();

    // Add PaginationParams
    private PaginationParams paginationParams = new PaginationParams { PageSize = 3 };

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        var response = await userService.GetAllAsync(paginationParams, searchTerm);
        users = response.Data;
        pagination = response.Pagination;
    }

    private async Task OnKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") // Agar Enter bosilsa
        {
            await LoadUsers(); // Qidiruvni amalga oshirish
        }
    }

    private void ShowDeleteDialog(long deletedUserId)
    {
        userId = deletedUserId;
        showDeleteDialog = true; // Dialogni ko'rsatish
    }

    private async Task HandleDeleteUser(bool isConfirmed)
    {
        showDeleteDialog = false; // Dialogni yopish

        if (isConfirmed)
        {
            try
            {
                await userService.DeleteAsync(userId);
                await LoadUsers(); // Ro'yxatni yangilash
            }
            catch (Exception ex)
            {
                showError = true; // Xatolik xabarini ko'rsatish
                errorMessage = ex.Message; // Xatolik xabarini o'rnatish
            }
        }
    }

    private async Task GoToPage(int page)
    {
        paginationParams.PageIndex = page;
        await LoadUsers(); // Load users for the selected page
    }

    private async Task GoToPreviousPage()
    {
        if (pagination.HasPrevious)
        {
            paginationParams.PageIndex--;
            await LoadUsers(); // Load users for the previous page
        }
    }

    private async Task GoToNextPage()
    {
        if (pagination.HasNext)
        {
            paginationParams.PageIndex++;
            await LoadUsers(); // Load users for the next page
        }
    }
}